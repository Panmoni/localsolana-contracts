import * as anchor from "@coral-xyz/anchor";
import { Program, BN } from "@coral-xyz/anchor";
import { LocalsolanaContracts } from "../target/types/localsolana_contracts";
import { Keypair, PublicKey, LAMPORTS_PER_SOL } from "@solana/web3.js";
import * as dotenv from "dotenv";
import * as fs from "fs";
import * as path from "path";

dotenv.config();

// Helper: Load a keypair from a JSON file
function loadKeypair(filePath: string): Keypair {
  const absolutePath = filePath.startsWith("~")
    ? path.join(process.env.HOME || process.env.USERPROFILE || ".", filePath.slice(1))
    : filePath;
  const secretKeyString = fs.readFileSync(absolutePath, "utf8");
  const secretKey = Uint8Array.from(JSON.parse(secretKeyString));
  return Keypair.fromSecretKey(secretKey);
}

// Load keypairs from .env file paths
const seller = loadKeypair(process.env.SELLER_KEYPAIR || "");
const buyer = loadKeypair(process.env.BUYER_KEYPAIR || "");
const arbitrator = loadKeypair(process.env.ARBITRATOR_KEYPAIR || "");

// Dummy values for escrow creation
const dummyEscrowId = new BN(1);
const dummyTradeId = new BN(2);

// Derive the PDA for the escrow account
async function deriveEscrowPDA(programId: PublicKey): Promise<PublicKey> {
  const seedEscrow = Buffer.from("escrow");
  const escrowIdBuffer = Buffer.alloc(8);
  escrowIdBuffer.writeBigUInt64LE(BigInt(dummyEscrowId.toString()));
  const tradeIdBuffer = Buffer.alloc(8);
  tradeIdBuffer.writeBigUInt64LE(BigInt(dummyTradeId.toString()));
  const [escrowPDA] = await PublicKey.findProgramAddress(
    [seedEscrow, escrowIdBuffer, tradeIdBuffer],
    programId
  );
  return escrowPDA;
}

// Helper to ensure sufficient funds and verify post-airdrop balance
async function ensureFunds(
  publicKey: PublicKey,
  minLamports: number,
  connection: anchor.web3.Connection
) {
  const balance = await connection.getBalance(publicKey);
  console.log(`Initial balance for ${publicKey.toBase58()}: ${balance} lamports`);
  if (balance < minLamports) {
    console.log(`Requesting airdrop for ${publicKey.toBase58()} (${minLamports} lamports)...`);
    const sig = await connection.requestAirdrop(publicKey, minLamports);
    await connection.confirmTransaction(sig);
    const newBalance = await connection.getBalance(publicKey);
    console.log(`Airdrop complete. New balance: ${newBalance} lamports`);
    if (newBalance < minLamports) {
      throw new Error(`Airdrop failed: Balance ${newBalance} < ${minLamports} for ${publicKey.toBase58()}`);
    }
  } else {
    console.log(`Balance sufficient: ${balance} lamports >= ${minLamports}`);
  }
}

const provider = anchor.AnchorProvider.env();
anchor.setProvider(provider);

describe("Minimal Create Escrow Test", () => {
  const program = anchor.workspace.LocalsolanaContracts as Program<LocalsolanaContracts>;
  const expectedProgramId = new PublicKey("4PonUp1nPEzDPnRMPjTqufLT3f37QuBJGk1CVnsTXx7x");

  before(async () => {
    // Verify program ID matches the deployed one
    console.log("Program ID from workspace:", program.programId.toBase58());
    console.log("Expected Program ID:", expectedProgramId.toBase58());
    if (!program.programId.equals(expectedProgramId)) {
      throw new Error(
        `Program ID mismatch! Workspace: ${program.programId.toBase58()}, Expected: ${expectedProgramId.toBase58()}`
      );
    }

    // Ensure all keypairs have sufficient funds (1 SOL should cover rent + fees)
    const minLamports = 1 * LAMPORTS_PER_SOL;
    await ensureFunds(seller.publicKey, minLamports, provider.connection);
    await ensureFunds(buyer.publicKey, minLamports, provider.connection);
    await ensureFunds(arbitrator.publicKey, minLamports, provider.connection);
  });

  it("Creates an escrow", async () => {
    const escrowPDA = await deriveEscrowPDA(program.programId);

    // Log seller balance before transaction
    const sellerBalanceBefore = await provider.connection.getBalance(seller.publicKey);
    console.log(`Seller balance before transaction: ${sellerBalanceBefore} lamports`);
    console.log("Creating escrow with PDA:", escrowPDA.toBase58());

    // Execute the create_escrow transaction
    await program.methods
      .createEscrow(dummyEscrowId, dummyTradeId, new BN(100), false, null)
      .accounts({
        seller: seller.publicKey,
        buyer: buyer.publicKey,
        escrow: escrowPDA,
        system_program: anchor.web3.SystemProgram.programId,
      })
      .signers([seller])
      .rpc();

    // Log seller balance after transaction to confirm lamports were spent
    const sellerBalanceAfter = await provider.connection.getBalance(seller.publicKey);
    console.log(`Seller balance after transaction: ${sellerBalanceAfter} lamports`);
    console.log("Escrow created with PDA:", escrowPDA.toBase58());
  });
});
